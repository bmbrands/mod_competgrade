{"version":3,"file":"competgrade.min.js","sources":["../src/competgrade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the CompetGrade Grading App UI.\n *\n * @module     mod_competgrade/competgrade\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\nclass CompetGrade {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.competgrade = this.gradingApp.dataset.competgradeId;\n        this.globalGrade = this.gradingApp.querySelector('[data-action=\"globalgrade\"]');\n        this.globalComment = this.gradingApp.querySelector('[data-action=\"globalcomment\"]');\n        this.userlist = [];\n        this.currentUser = 0;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the User list.\n     * @return {Promise} The promise.\n     */\n    getUserList() {\n        const args = {\n            'competgrade': this.competgrade,\n        };\n        const request = {\n            methodname: 'mod_competgrade_userlist',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the User Comments.\n     * @param {Object} user The user.\n     * @return {Promise} The promise.\n     */\n    getUserComments(user) {\n        const args = {\n            'competgrade': this.competgrade,\n            'userid': user.id,\n        };\n        const request = {\n            methodname: 'mod_competgrade_usercomments',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the Certification.\n     * @param {Object} user The user.\n     * @return {Promise} The promise.\n     */\n    getCertification(user) {\n        const args = {\n            'competgrade': this.competgrade,\n            'userid': user.id,\n        };\n        const request = {\n            methodname: 'mod_competgrade_certification',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n    /**\n     * Save the grade\n     * @param {Object} args The grade to save.\n     * @return {Promise} The promise.\n     */\n    saveGrade(args) {\n        args.competgrade = this.competgrade;\n        args.userid = this.currentUser.id;\n        const request = {\n            methodname: 'mod_competgrade_grade',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get a comment\n     * @param {Object} args The comment to get.\n     * @return {Promise} The promise.\n     */\n    getComment(args) {\n        const request = {\n            methodname: 'mod_competgrade_getcomment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Save a comment\n     * @param {Object} args The comment to save.\n     * @return {Promise} The promise.\n     */\n    saveComment(args) {\n        args.competgrade = this.competgrade;\n        const request = {\n            methodname: 'mod_competgrade_comment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete a comment\n     * @param {Object} args The comment to delete.\n     * @return {Promise} The promise.\n     */\n    deleteComment(args) {\n        const request = {\n            methodname: 'mod_competgrade_deletecomment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete the grade\n     * @param {Object} args The grade to delete.\n     * @return {Promise} The promise.\n     */\n    deleteGrade(args) {\n        args.competgrade = this.competgrade;\n        const request = {\n            methodname: 'mod_competgrade_deletegrade',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Show the comment saved message.\n     * @param {Int} commentid The comment id.\n     */\n    commentSavedMessage(commentid) {\n        const commentRegion = this.gradingApp.querySelector('[data-region=\"comment\"][data-comment-id=\"' + commentid + '\"]');\n        if (!commentRegion) {\n            return;\n        }\n        const savedMessage = commentRegion.closest('[data-region=\"commentwrapper\"]').querySelector('[data-region=\"commentsaved\"]');\n        if (!savedMessage) {\n            return;\n        }\n\n        savedMessage.classList.remove('opacity-0');\n        setTimeout(() => {\n            savedMessage.classList.add('opacity-0');\n        }, 3000);\n    }\n\n    /**\n     * Event listeners.\n     */\n    addEventListeners() {\n        this.globalGrade.addEventListener('change', (event) => {\n            let value = event.target.value;\n\n            const args = {\n                'competgrade': this.competgrade,\n                'gradeid': event.target.dataset.gradeId,\n                'criterium': event.target.dataset.criteriumId,\n            };\n            if (!value || value == '') {\n                this.deleteGrade(args);\n                return;\n            }\n            args.grade = value;\n            this.saveGrade(args).then((response) => {\n                if (response.gradeid) {\n                    event.target.dataset.gradeId = response.gradeid;\n                }\n                this.currentUser.grade = value;\n                return;\n            }).catch(Notification.exception);\n\n        });\n\n        this.globalComment.addEventListener('input', (event) => {\n            let value = event.target.value;\n\n            const args = {\n                'competgrade': this.competgrade,\n                'gradeid': event.target.dataset.gradeId,\n                'userid': this.currentUser.id,\n                'type': 2,\n                'commenttitle': 'Global comment',\n                'commenttext': value,\n            };\n            if (event.target.dataset.commentId) {\n                args.commentid = event.target.dataset.commentId;\n            }\n            if (!value || value == '') {\n                if (event.target.dataset.commentId) {\n                    this.deleteComment({commentid: event.target.dataset.commentId});\n                }\n            } else {\n                // Repeat the saveComment with a debounce.\n                clearTimeout(this.commentTimeout);\n                this.commentTimeout = setTimeout(() => {\n                    args.commenttext = event.target.value;\n                    this.saveComment(args).then((response) => {\n                        if (response.commentid) {\n                            event.target.dataset.commentId = response.commentid;\n                            this.commentSavedMessage(response.commentid);\n                        }\n                        return;\n                    }).catch(Notification.exception);\n                }, 1000);\n            }\n        });\n\n        document.addEventListener('click', (event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                event.preventDefault();\n                let index = this.userlist.indexOf(this.currentUser);\n                if (index == 0) {\n                    return;\n                }\n                this.setCurrentUser(this.userlist[index - 1]);\n                this.render();\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                event.preventDefault();\n                let index = this.userlist.indexOf(this.currentUser);\n                if (index == this.userlist.length - 1) {\n                    return;\n                }\n                this.setCurrentUser(this.userlist[index + 1]);\n                this.render();\n            }\n        });\n    }\n\n    setCurrentUser(user) {\n        this.currentUser = user;\n        this.globalGrade.dataset.gradeId = user.gradeid;\n        this.globalGrade.value = user.grade;\n    }\n\n    /**\n     * Render the user list.\n     */\n    render() {\n        this.renderUserNavigation();\n        this.renderComments();\n        this.renderCertification();\n        this.getGlobalComment();\n    }\n\n    /**\n     * Render the user navigation.\n     */\n    renderUserNavigation() {\n        const navigation = this.gradingApp.querySelector('[data-region=\"user-navigation\"]');\n        const template = 'mod_competgrade/usernavigation';\n        const context = {\n            'user': this.currentUser,\n        };\n        Templates.render(template, context).then((html) => {\n            navigation.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n\n        const header = this.gradingApp.querySelector('[data-region=\"user-header\"]');\n        const templateHeader = 'mod_competgrade/userheader';\n        Templates.render(templateHeader, context).then((html) => {\n            header.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Render the user comments.\n     */\n    async renderComments() {\n        const comments = await this.getUserComments(this.currentUser);\n        const commentsRegion = this.gradingApp.querySelector('[data-region=\"comments\"]');\n        const template = 'mod_competgrade/comments';\n\n        if (!comments) {\n            return;\n        }\n\n        Templates.render(template, comments).then((html) => {\n            commentsRegion.innerHTML = html;\n            this.activateShowMoreLess();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Render the certification.\n     */\n    async renderCertification() {\n        const certification = await this.getCertification(this.currentUser);\n        const certificationRegion = this.gradingApp.querySelector('[data-region=\"certification\"]');\n        const template = 'mod_competgrade/certification';\n\n        if (!certification) {\n            return;\n        }\n\n        Templates.render(template, certification).then((html) => {\n            certificationRegion.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Activate show more / less for comments.\n     */\n    activateShowMoreLess() {\n        const comments = this.gradingApp.querySelectorAll('[data-region=\"commenttext\"]');\n        comments.forEach((comment) => {\n            const showMore = comment.querySelector('[data-action=\"showmore\"]');\n            const showLess = comment.querySelector('[data-action=\"showless\"]');\n            const shortText = comment.querySelector('[data-region=\"shorttext\"]');\n            const fullText = comment.querySelector('[data-region=\"fulltext\"]');\n            if (shortText.innerHTML.length != fullText.innerHTML.length) {\n                showMore.classList.remove('d-none');\n            }\n            showMore.addEventListener('click', (event) => {\n                event.preventDefault();\n                shortText.classList.add('d-none');\n                fullText.classList.remove('d-none');\n                showMore.classList.add('d-none');\n                showLess.classList.remove('d-none');\n            });\n            showLess.addEventListener('click', (event) => {\n                event.preventDefault();\n                shortText.classList.remove('d-none');\n                fullText.classList.add('d-none');\n                showMore.classList.remove('d-none');\n                showLess.classList.add('d-none');\n            });\n        });\n    }\n\n    /**\n     * Get the global comment.\n     */\n    getGlobalComment() {\n        const comment = this.gradingApp.querySelector('[data-action=\"globalcomment\"]');\n        const args = {\n            'competgrade': this.competgrade,\n            'userid': this.currentUser.id,\n            'type': 2,\n        };\n        this.getComment(args).then((response) => {\n            if (response.commentid) {\n                comment.value = response.commenttext;\n                comment.dataset.commentId = response.commentid;\n            } else {\n                comment.value = '';\n                comment.dataset.commentId = '';\n            }\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * User navigation.\n     */\n    async getData() {\n        const response = await this.getUserList();\n        if (!response.userlist) {\n            return;\n        }\n        this.userlist = response.userlist;\n        this.currentUser = response.userlist[0];\n        this.setCurrentUser(this.currentUser);\n        this.render();\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new CompetGrade();\n};\n\nexport default {\n    init: init,\n};"],"names":["CompetGrade","constructor","gradingApp","document","querySelector","competgrade","this","dataset","competgradeId","globalGrade","globalComment","userlist","currentUser","addEventListeners","getData","getUserList","request","methodname","args","promise","Ajax","call","fail","Notification","exception","getUserComments","user","id","getCertification","saveGrade","userid","getComment","saveComment","deleteComment","deleteGrade","commentSavedMessage","commentid","commentRegion","savedMessage","closest","classList","remove","setTimeout","add","addEventListener","event","value","target","gradeId","criteriumId","grade","then","response","gradeid","catch","commentId","clearTimeout","commentTimeout","commenttext","preventDefault","index","indexOf","setCurrentUser","render","length","renderUserNavigation","renderComments","renderCertification","getGlobalComment","navigation","context","html","innerHTML","header","comments","commentsRegion","activateShowMoreLess","certification","certificationRegion","querySelectorAll","forEach","comment","showMore","showLess","shortText","fullText","init"],"mappings":"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"}